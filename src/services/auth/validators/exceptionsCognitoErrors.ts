import { CognitoError } from '../error/cognitoError';
import { AUTH_RESPONSE, COGNITO_EXCEPTION } from './authResponse';

export function exceptionsCognitoErrors(
	error: CognitoError,
): string | undefined {
	const pathname = window.location.pathname;

	switch (error.code) {
		case COGNITO_EXCEPTION.CODE_DELIVERY_FAILURE:
			return AUTH_RESPONSE.CODE_DELIVERY_FAILURE;
		case COGNITO_EXCEPTION.INVALID_PARAMETER:
			return AUTH_RESPONSE.INVALID_PARAMETER;
		case COGNITO_EXCEPTION.INVALID_PASSWORD:
			return AUTH_RESPONSE.INVALID_PASSWORD;
		case COGNITO_EXCEPTION.INTERNAL_ERROR:
			return AUTH_RESPONSE.INTERNAL_ERROR;
		case COGNITO_EXCEPTION.NOT_AUTHORIZED:
			return AUTH_RESPONSE.NOT_AUTHORIZED;
		case COGNITO_EXCEPTION.REQUEST_EXPIRED:
			return AUTH_RESPONSE.REQUEST_EXPIRED;
		case COGNITO_EXCEPTION.SERVICE_UNAVAILABLE:
			return AUTH_RESPONSE.SERVICE_UNAVAILABLE;
		case COGNITO_EXCEPTION.TOO_MANY_REQUEST:
			return AUTH_RESPONSE.TOO_MANY_REQUEST;
		case COGNITO_EXCEPTION.USERNAME_EXIST:
			return AUTH_RESPONSE.USERNAME_EXIST;
		case COGNITO_EXCEPTION.USER_NOT_CONFIRMED:
			return AUTH_RESPONSE.USER_NOT_CONFIRMED;
		case COGNITO_EXCEPTION.USER_NOT_FOUND:
			return AUTH_RESPONSE.USER_NOT_CONFIRMED;
		default:
			if (pathname === 'login') {
				return AUTH_RESPONSE.FAILED_LOGIN;
			} else if (pathname === 'register') {
				return AUTH_RESPONSE.FAILED_REGISTER;
			}
	}
}
