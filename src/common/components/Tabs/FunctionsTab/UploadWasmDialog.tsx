import { Fragment, useState, useEffect } from 'react';

import ErrorMessage from '../../Form/ErrorMessage';
import SelectNetwork from '../../Input/SelectNetwork';
import SelectWasmFile from '../../Input/selectWasmFile';
import { Button } from '../../ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '../../ui/dialog';
import { CustomDragDrop, FileData } from './DragAndDropContainer';

import {
  useWasmFilesQuery,
  useDownloadWasmFileQuery,
} from '@/common/api/invocations';
import { Invocation } from '@/common/types/invocation';
import { NETWORK } from '@/common/types/soroban.enum';
import OverlayLoading from '@/common/views/OverlayLoading';
import { IWalletContent } from '@/modules/auth/interfaces/IAuthenticationContext';

interface UploadWasmDialogProps {
  open: boolean;
  onOpenChange: () => void;
  data: Invocation;
  wallet: IWalletContent | null;
  loading: boolean;
  files: FileData[];
  uploadFiles: (files: FileData[]) => void;
  deleteFile: (indexFile: number) => void;
  error: string | null;
  handleButtonClick: () => void;
  signedTransactionXDR: string | null;
  status: {
    status: string;
    taskArn: string;
    isEphemeral: boolean;
  };
  handleStart: ({ interval }: { interval: number }) => Promise<void>;
  handleStop: () => Promise<void>;
}

function UploadWasmDialog({
  open,
  onOpenChange,
  data,
  wallet,
  loading,
  files,
  uploadFiles,
  deleteFile,
  error,
  handleButtonClick,
  signedTransactionXDR,
}: Readonly<UploadWasmDialogProps>) {
  let buttonLabel = 'Load';
  if (!signedTransactionXDR && !wallet?.autoGenerated) {
    buttonLabel = 'Prepare';
  }

  const [selectedFile, setSelectedFile] =
    useState<string>('Select a Wasm file');
  const {
    data: wasmFiles = [],
    error: wasmFilesError,
    isLoading: wasmFilesLoading,
  } = useWasmFilesQuery();

  const noFilesMessage = 'No WASM files available.';

  const selected = wasmFiles.find((wasmFile) => wasmFile.id === selectedFile);
  const { data: fileData, error: downloadError } = useDownloadWasmFileQuery(
    selected ? { fileName: selected.id } : { fileName: '' },
  );

  useEffect(() => {
    if (downloadError) {
      console.error('Failed to download the file:', downloadError);
    } else if (fileData) {
      deleteFile(0);
      uploadFiles([fileData]);
    }
  }, [deleteFile, downloadError, fileData, uploadFiles]);

  function handleFileChange(file: string) {
    if (file === 'Select a Wasm file') {
      setSelectedFile('Select a Wasm file');
      deleteFile(0);
      return;
    }
    setSelectedFile(file);
  }

  return (
    <Fragment>
      {loading ? (
        <OverlayLoading type="upload" />
      ) : (
        <Dialog open={open} onOpenChange={onOpenChange}>
          <DialogContent
            data-test="import-account-modal-container"
            className="min-w-fit"
          >
            <DialogHeader>
              <DialogTitle
                data-test="import-account-modal-title"
                className="text-lg select-none"
              >
                Upload Wasm File
              </DialogTitle>
              <DialogDescription
                data-test="import-account-modal-description"
                className="text-sm select-none"
              >
                Please upload the WASM file of the contract
              </DialogDescription>
              {data.network === NETWORK.EPHEMERAL ? (
                <DialogDescription
                  data-test="import-account-modal-description"
                  className="text-sm select-none"
                >
                  This is an ephemeral network, the contract will be deployed on
                  the network and will be available for a limited time.
                </DialogDescription>
              ) : null}
            </DialogHeader>
            <Fragment>
              {selectedFile === 'Select a Wasm file' ? (
                <CustomDragDrop
                  ownerLicense={files}
                  onUpload={(newFiles) => uploadFiles([newFiles[0]])}
                  onDelete={deleteFile}
                  count={1}
                  formats={['wasm']}
                />
              ) : null}

              {error && (
                <ErrorMessage
                  message={error}
                  testName="import-account-modal-error"
                  styles="text-sm align-middle"
                />
              )}
              <DialogFooter className="mt-2">
                <div className="flex items-center justify-between w-full">
                  <div className="flex flex-col items-start gap-2">
                    {wasmFilesLoading ? (
                      <span className="text-sm">
                        Loading available Wasm files...
                      </span>
                    ) : wasmFilesError ? (
                      <ErrorMessage
                        message="Failed to load WASM files"
                        testName="import-account-modal-error"
                        styles="text-sm align-middle"
                      />
                    ) : wasmFiles?.length === 0 ? (
                      <span className="text-sm">{noFilesMessage}</span>
                    ) : (
                      <SelectWasmFile
                        wasmFiles={wasmFiles}
                        selectedFile={selectedFile}
                        onFileChange={handleFileChange}
                      />
                    )}
                    {data.network !== NETWORK.AUTO_DETECT && (
                      <SelectNetwork network={data.network} />
                    )}
                  </div>
                  <div className="flex items-center justify-between gap-2">
                    {files?.length > 0 && (
                      <Button
                        type="submit"
                        className="px-4 py-2 font-bold transition-all duration-300 ease-in-out transform border-2 shadow-md hover:scale-105"
                        data-test="edit-entity-dialog-btn-submit"
                        onClick={handleButtonClick}
                      >
                        {buttonLabel}
                      </Button>
                    )}
                    <Button
                      type="submit"
                      className="px-4 py-2 font-bold transition-all duration-300 ease-in-out transform border-2 shadow-md hover:scale-105"
                      variant="outline"
                      data-test="edit-entity-dialog-btn-submit"
                      onClick={onOpenChange}
                    >
                      Cancel
                    </Button>
                  </div>
                </div>
              </DialogFooter>
            </Fragment>
          </DialogContent>
        </Dialog>
      )}
    </Fragment>
  );
}

export default UploadWasmDialog;
