import { NetworkConnectionButton } from './networkConnectionButton';
import { PrivateKeyDisplay } from './privateKeyDisplay';
import { PublicKeyDisplay } from './publicKeyDisplay';
import StellarBalance from './stellarBalance';

import { NETWORK } from '@/common/types/soroban.enum';
import { IWalletContent } from '@/modules/auth/interfaces/IAuthenticationContext';

interface NetworkSectionProps {
  network: NETWORK;
  wallet: IWalletContent | null;
  connectWallet: (network: NETWORK) => void;
  disconnectWallet: (network?: Partial<NETWORK>) => void;
  networkBalance?: 'testnet' | 'mainnet' | 'futurenet';
}

export function NetworkSection({
  network,
  wallet,
  connectWallet,
  disconnectWallet,
  networkBalance,
}: Readonly<NetworkSectionProps>) {
  const isConnected = wallet?.publicKey !== undefined;

  return (
    <div
      className="flex flex-col items-start justify-between w-auto h-full gap-4 p-6 font-bold border-2 border-solid rounded-lg border-offset-background bg-slate-900"
      data-test="collection-folder-container"
    >
      <div className="flex items-center justify-between w-full gap-4">
        <div className="flex items-baseline w-full h-full gap-4">
          <p className="flex items-center text-lg pointer-events-none">
            {network}
            <span
              className={`ml-4 flex items-center gap-1 pointer-events-none ${
                isConnected ? 'text-green-400' : 'text-red-400'
              }`}
            >
              <span
                className={`w-2 h-2 rounded-full pointer-events-none ${
                  isConnected ? 'bg-green-400' : 'bg-red-400'
                }`}
              />
              {isConnected ? 'Connected' : 'Disconnected'}
            </span>
          </p>
          {wallet?.autoGenerated && (
            <p className="text-sm text-orange-400 pointer-events-none">
              Auto Generated
            </p>
          )}
          {!wallet?.autoGenerated && wallet?.type && (
            <p className="text-sm text-orange-400 pointer-events-none">
              {wallet.type.charAt(0).toUpperCase() +
                wallet.type.toLocaleLowerCase().slice(1)}
            </p>
          )}
        </div>
        <NetworkConnectionButton
          network={network}
          isConnected={isConnected}
          connectWallet={connectWallet}
          disconnectWallet={disconnectWallet}
          autoGenerated={wallet?.autoGenerated}
        />
      </div>
      <StellarBalance
        publicKey={wallet?.publicKey}
        networkBalance={networkBalance}
      />
      {wallet?.publicKey && <PublicKeyDisplay publicKey={wallet.publicKey} />}
      {wallet?.privateKey && (
        <PrivateKeyDisplay privateKey={wallet.privateKey} />
      )}
    </div>
  );
}
