import { IStatusState, IStatus } from './IStatusState';

import { NETWORK } from '@/common/types/soroban.enum';
import { WalletType } from '@/modules/signer/constants/enums';

export interface IAuthenticationContext {
  handleResetPassword: (
    email: string,
    newPassword: string,
    code: string,
  ) => Promise<void>;
  handleSignIn: (email: string, password: string) => Promise<void>;
  handleSignUp: (email: string, password: string) => Promise<void>;
  handleForgotPassword: (email: string) => Promise<void>;
  handleRefreshSession: () => Promise<void>;
  handleSignOut: () => void;
  statusState: IStatusState;
  onCreateAccountEphimeral: (urlEphimeral: string) => void;
  onDeleteAccountEphimeral: () => void;
  connectWallet(network: Partial<NETWORK>): Promise<void>;
  disconnectWallet(network?: Partial<NETWORK>): void;
  onCreateAccount(
    showToast?: boolean,
    refreshSession?: boolean,
    wallets?: IWallet,
    email?: string,
  ): void;
  handleChangePassword: (
    oldPassword: string,
    newPassword: string,
  ) => Promise<void>;
  wallet: IWallet;
  setStatusState: (
    statusType: keyof IStatusState,
    value: Partial<IStatus>,
  ) => void;
}

export interface IWallet {
  [NETWORK.SOROBAN_MAINNET]: IWalletContent | null;
  [NETWORK.SOROBAN_TESTNET]: IWalletContent | null;
  [NETWORK.SOROBAN_FUTURENET]: IWalletContent | null;
  [NETWORK.EPHEMERAL]: IWalletContent | null;
  [NETWORK.AUTO_DETECT]: IWalletContent | null;
}

export interface IWalletContent {
  type: WalletType | '';
  network: NETWORK;
  privateKey?: string;
  autoGenerated?: boolean;
  publicKey: string;
  email: string | null;
}
